extends layout

block content
    if user
        | Вы вошли.
        a#logout Выйти
    else
        | Вы не вошли.
    .chat-wrapper
        .chat-head
            span
                h2 Chat
        .chat-body
            .chat-sidebar#connected_users
            .chat-main
                ul.messages#msgs
                .chat-input
                    textarea.chat-text#chat_text(placeholder="Type your message here")
        .input(type="hidden" id= slug class="slug")
            .clear
    script(type="text/javascript").
        var $slug = $('.slug').attr('id');
        console.log($slug);
        var socket = io.connect('/conferences', {query: 'slug='+$slug});
        var $chat_text = $('#chat_text');
        var $messages = $('#msgs');
        var _users = [];
        var userinfo = {};


        /* GET profile online */
        /*  END  */

        /* GET user informatio */


        $chat_text.keypress(function(e){
           if(e.which == 13){
               var message = $chat_text.val();
               if(message.length > 0) {
                   if(message.length > 3){ //private message
                       var whisper_regex = /^[\\\/]w\s([A-Za-z0-9_]+)\s(.+)/i;
                       var match = message.match(whisper_regex);
                       if(match){//if username and msg provided
                           var to = match[1];
                           var msg = match[2];
                           if(to === userinfo.username) return false;// we don't need to send private messages to ourselves
                           if($.inArray(to, _users) !== -1){
                               socket.emit('chat:send_message:private', {to: to, msg: msg});
                               sendPrivateMessage(msg, userinfo.username, true);
                               $chat_text.val("");
                               return false;
                           }
                           else{
                               //...
                               return false;
                           }
                       }

                   }

                   socket.emit('chat:send_message', message);
                   $chat_text.val("");
                   //sendMessage(message, 'left', false);
                   return false;
               }
           }
        });
        $('#logout').on('click', function(){
            $.post('/logout', function(data){
                $('#logout').text("Вы вышли!");
            });
        });
        socket.on('chat:send_message', function(data){
           sendCheck(data, false);
        });

        socket.on('chat:send_message:private', function(data){
            console.log(data);
            sendCheck(data, true);
        });


        function sendCheck(data, whisper){
            var isMe = data.username == userinfo.username;
            if(whisper){
                sendPrivateMessage(data.message, data.username, isMe);
                return false;
            }
            sendMessage(data.message, data.username, isMe, data._id);
        }


        socket.on('clients:get:history', function(data){
            console.log(data);
            _.each(data, function(record){
                sendCheck(record, false)
            });

        });

        socket.on('clients:get:online', function(users){
            console.log(users);
            users.forEach(function(user) {
                        $('#connected_users').append("<p class='user-field'>"+user+"</p>");
                        _users.push(user);
                    }
            );
        });

        socket.on('clients:get:information', function(data){
            userinfo = _.clone(data);
            console.log(userinfo);
        });

        socket.on('clients:join', function(username){
            console.log(username);
            $('#connected_users').append("<p class='user-field'>"+username+"</p>");
            sendMessage(username + "connected", false);
        });

        socket.on('not logged in', function(){
            location.href = "/login";
        });
        function parseId(id){
            return id.substring(4);
        }

        socket.on('chat:edit_message', function(msg, id){
            $('#msg_'+ id).text(msg);
        });

        socket.on('clients:leave', function(username){
            $(".user-field:contains('"+ username +"')").remove();
        });


        $(document).on('click', '.user-field', function(){
            var username = $(this).text();
            var prev_msg = $chat_text.val();
            var new_msg = "/w " + username + " " + prev_msg;
            $chat_text.val(new_msg);
        });



         var sendMessage = function(message, username, isMe, id){
             var me = isMe ? ' me' : '';
             var p = $("<p>", {
                 'class': 'message-header'
                }).text(username);
             var p2 = $("<p>", {
                 'class': 'message'
             }).text(message);


             var li = $("<li>", {
                 'id': 'msg_'+id,
                 'class': 'message-wrapper public'  + me
             });
             li.append(p);
             li.append(p2);
             $messages.append(li);
             if($messages[0].scrollTop == $messages[0].scrollHeight){
                 $messages.scrollTop($messages[0].scrollHeight);
             }
        };

        var sendPrivateMessage = function(message, username, isMe){
            var me = isMe ? ' me' : '';
            var p = $("<p>", {
                'class': 'message-header'
            }).text(username);
            var p2 = $("<p>", {
                'class': 'message'
            }).text(message);

            var li = $("<li>", {
                'class': 'message-wrapper private' + me
            });

            li.append(p);
            li.append(p2);
            $messages.append(li);
            if($messages[0].scrollTop == $messages[0].scrollHeight){
                $messages.scrollTop($messages[0].scrollHeight);
            }
        };